name: EC2 Runner Workflow

on:
  workflow_dispatch:  # Manual trigger
  push:
    branches: [ main ]

env:
  AWS_REGION: us-east-1  # Change this to your desired region
  INSTANCE_TYPE: t2.micro  # Change this to your desired instance type
  AMI_ID: ami-04b4f1a9cf54c11d0  # Amazon Linux 2 AMI ID

jobs:
  run-on-ec2:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Launch EC2 instance
      id: launch-ec2
      run: |
        # Launch the instance and capture its ID
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ env.AMI_ID }} \
          --instance-type ${{ env.INSTANCE_TYPE }} \
          --security-group-ids ${{ secrets.AWS_SECURITY_GROUP }} \
          --subnet-id ${{ secrets.AWS_SUBNET_ID }} \
          --associate-public-ip-address \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=GithubActionRunner}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
        
        # Wait for instance to be running
        aws ec2 wait instance-running --instance-ids $INSTANCE_ID
        
        # Get public IP and ensure it's set with increased timeout
        MAX_ATTEMPTS=30
        ATTEMPT=1
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
          echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to get public IP..."
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          
          if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
            echo "Public IP obtained: $PUBLIC_IP"
            echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
            break
          fi
          
          if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
            echo "Failed to get public IP after $MAX_ATTEMPTS attempts"
            exit 1
          fi
          
          ATTEMPT=$((ATTEMPT + 1))
          sleep 10
        done
        
        # Wait for SSH to be available with increased timeout
        echo "Waiting for SSH to become available at $PUBLIC_IP..."
        MAX_SSH_ATTEMPTS=30
        SSH_ATTEMPT=1
        
        while [ $SSH_ATTEMPT -le $MAX_SSH_ATTEMPTS ]; do
          echo "SSH connection attempt $SSH_ATTEMPT of $MAX_SSH_ATTEMPTS..."
          if nc -z -w 5 $PUBLIC_IP 22; then
            echo "SSH is available!"
            break
          fi
          
          if [ $SSH_ATTEMPT -eq $MAX_SSH_ATTEMPTS ]; then
            echo "Failed to establish SSH connection after $MAX_SSH_ATTEMPTS attempts"
            exit 1
          fi
          
          SSH_ATTEMPT=$((SSH_ATTEMPT + 1))
          sleep 10
        done
    
    - name: Run Python script on EC2
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
      run: |
        # Setup SSH key
        echo "$SSH_PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Create a setup script for Python environment
        cat << 'EOF' > setup.sh
        #!/bin/bash
        sudo yum update -y
        sudo yum install -y python3 python3-pip
        python3 -m pip install --upgrade pip
        if [ -f "requirements.txt" ]; then
          python3 -m pip install -r requirements.txt
        fi
        EOF
        
        # Copy files to EC2
        scp -i private_key.pem -o StrictHostKeyChecking=no \
          setup.sh *.py requirements.txt* ec2-user@${PUBLIC_IP}:~/
        
        # Setup Python environment and run script
        ssh -i private_key.pem -o StrictHostKeyChecking=no ec2-user@${PUBLIC_IP} \
          "chmod +x setup.sh && ./setup.sh && python3 *.py > output.txt 2>&1"
        
        # Get the results back
        scp -i private_key.pem -o StrictHostKeyChecking=no \
          ec2-user@${PUBLIC_IP}:~/output.txt ./
    
    - name: Upload results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: python-script-results
        path: output.txt
    
    - name: Terminate EC2 instance
      if: always()  # Run even if previous steps failed
      run: |
        aws ec2 terminate-instances \
          --instance-ids ${{ env.INSTANCE_ID }}
        
        # Wait for instance to be terminated
        aws ec2 wait instance-terminated \
          --instance-ids ${{ env.INSTANCE_ID }} 